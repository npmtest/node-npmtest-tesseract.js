{"/home/travis/build/npmtest/node-npmtest-tesseract.js/test.js":"/* istanbul instrument in package npmtest_tesseract_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tesseract.js/lib.npmtest_tesseract.js.js":"/* istanbul instrument in package npmtest_tesseract_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_tesseract_js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_tesseract_js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-tesseract.js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-tesseract.js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_tesseract_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_tesseract_js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_tesseract_js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_tesseract_js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_tesseract_js.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_tesseract_js.__dirname + '/lib.npmtest_tesseract_js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tesseract.js/node_modules/tesseract.js/src/index.js":"const adapter = require('./node/index.js')\nconst circularize = require('./common/circularize.js')\nconst TesseractJob = require('./common/job');\nconst objectAssign = require('object-assign');\nconst version = require('../package.json').version;\n\nfunction create(workerOptions){\n\tworkerOptions = workerOptions || {};\n\tvar worker = new TesseractWorker(objectAssign({}, adapter.defaultOptions, workerOptions))\n\tworker.create = create;\n\tworker.version = version;\n\treturn worker;\n}\n\nclass TesseractWorker {\n\tconstructor(workerOptions){\n\t\tthis.worker = null;\n\t\tthis.workerOptions = workerOptions;\n\t\tthis._currentJob = null;\n\t\tthis._queue = []\n\t}\n\n\trecognize(image, options){\n\t\treturn this._delay(job => {\n\t\t\tif(typeof options === 'string'){\n\t\t\t\toptions = { lang: options };\n\t\t\t}else{\n\t\t\t\toptions = options || {}\n\t\t\t\toptions.lang = options.lang || 'eng';\t\n\t\t\t}\n\t\t\t\n\t\t\tjob._send('recognize', { image: image, options: options, workerOptions: this.workerOptions })\n\t\t})\n\t}\n\tdetect(image, options){\n\t\toptions = options || {}\n\t\treturn this._delay(job => {\n\t\t\tjob._send('detect', { image: image, options: options, workerOptions: this.workerOptions })\n\t\t})\n\t}\n\n\tterminate(){ \n\t\tif(this.worker) adapter.terminateWorker(this);\n\t\tthis.worker = null;\n\t}\n\n\t_delay(fn){\n\t\tif(!this.worker) this.worker = adapter.spawnWorker(this, this.workerOptions);\n\n\t\tvar job = new TesseractJob(this);\n\t\tthis._queue.push(e => {\n\t\t\tthis._queue.shift()\n\t\t\tthis._currentJob = job;\n\t\t\tfn(job)\n\t\t})\n\t\tif(!this._currentJob) this._dequeue();\n\t\treturn job\n\t}\n\n\t_dequeue(){\n\t\tthis._currentJob = null;\n\t\tif(this._queue.length > 0){\n\t\t\tthis._queue[0]()\n\t\t}\n\t}\n\n\t_recv(packet){\n\n        if(packet.status === 'resolve' && packet.action === 'recognize'){\n            packet.data = circularize(packet.data);\n        }\n\n\t\tif(this._currentJob.id === packet.jobId){\n\t\t\tthis._currentJob._handle(packet)\n\t\t}else{\n\t\t\tconsole.warn('Job ID ' + packet.jobId + ' not known.')\n\t\t}\n\t}\n}\n\nvar DefaultTesseract = create()\n\nmodule.exports = DefaultTesseract","/home/travis/build/npmtest/node-npmtest-tesseract.js/node_modules/tesseract.js/src/node/index.js":"const path = require('path')\nconst fetch = require('node-fetch')\nconst isURL = require('is-url')\n\nexports.defaultOptions = {\n    workerPath: path.join(__dirname, 'worker.js'),\n    langPath: 'http://cdn.rawgit.com/naptha/tessdata/gh-pages/3.02/',\n}\n\nconst fork = require('child_process').fork;\nconst fs = require('fs')\n\nexports.spawnWorker = function spawnWorker(instance, workerOptions){\n    var cp = fork(workerOptions.workerPath);\n    cp.on('message', function(packet){\n        instance._recv(packet)\n    })\n    return cp;\n}\n\nexports.terminateWorker = function(instance){\n    instance.worker.kill()\n}\n\nexports.sendPacket = function sendPacket(instance, packet){\n    loadImage(packet.payload.image, function(img){\n        packet.payload.image = img\n        instance.worker.send(packet)\n    })\n}\n\n\nfunction loadImage(image, cb){\n    \n    if(isURL(image)) {\n        fetch(image).then(function (resp) {\n            return resp.buffer();\n        }).then(function (buffer) {\n            return loadImage(buffer, cb);\n        }).catch(function (err) {\n            return console.error(err);\n        });\n    }\n\n    if(typeof image === 'string'){\n        fs.readFile(image, function(err, buffer){\n            if (err) throw err;\n            loadImage(buffer, cb)\n        })\n        return\n    }else if(image instanceof Buffer){\n        var fileType = require('file-type');\n        var mime = fileType(image).mime\n\n        if(mime === 'image/png'){\n            var PNGReader = require('png.js');\n            var reader = new PNGReader(image);\n            reader.parse(function(err, png){\n                if (err) throw err;\n\n                var image = {\n                    width: png.getWidth(),\n                    height: png.getHeight()\n                }\n                image.data = new Uint8Array(image.width * image.height * 4)\n                for(var j = 0; j < image.height; j++){\n                    for(var i = 0; i < image.width; i++){\n                        var offset = 4 * (i + j * image.width),\n                            pix = png.getPixel(i, j);\n\n                        image.data[offset] = pix[0]\n                        image.data[offset + 1] = pix[1]\n                        image.data[offset + 2] = pix[2]\n                        image.data[offset + 3] = pix[3];\n                    }\n                }\n                // console.log(image)\n                loadImage(image, cb)\n            });\n            return\n        }else if(mime === 'image/jpeg'){\n            var jpeg = require('jpeg-js');\n            loadImage(jpeg.decode(image), cb)\n            return\n        }\n\n        // TODO: support for TIFF, NetPBM, BMP, etc.\n    }\n\n    // node uses json.stringify for ipc which means we need to turn\n    // fancy arrays into raw arrays\n    if(image && image.data && image.data.length && !Array.isArray(image.data)){\n        image.data = Array.from(image.data)\n        return loadImage(image, cb)\n    }\n    cb(image)\n}","/home/travis/build/npmtest/node-npmtest-tesseract.js/node_modules/tesseract.js/src/common/circularize.js":"// The result of dump.js is a big JSON tree\n// which can be easily serialized (for instance\n// to be sent from a webworker to the main app\n// or through Node's IPC), but we want\n// a (circular) DOM-like interface for walking\n// through the data. \n\nmodule.exports = function circularize(page){\n    page.paragraphs = []\n    page.lines = []\n    page.words = []\n    page.symbols = []\n\n    page.blocks.forEach(function(block){\n        block.page = page;\n\n        block.lines = []\n        block.words = []\n        block.symbols = []\n\n        block.paragraphs.forEach(function(para){\n            para.block = block;\n            para.page = page;\n\n            para.words = []\n            para.symbols = []\n            \n            para.lines.forEach(function(line){\n                line.paragraph = para;\n                line.block = block;\n                line.page = page;\n\n                line.symbols = []\n\n                line.words.forEach(function(word){\n                    word.line = line;\n                    word.paragraph = para;\n                    word.block = block;\n                    word.page = page;\n                    word.symbols.forEach(function(sym){\n                        sym.word = word;\n                        sym.line = line;\n                        sym.paragraph = para;\n                        sym.block = block;\n                        sym.page = page;\n                        \n                        sym.line.symbols.push(sym)\n                        sym.paragraph.symbols.push(sym)\n                        sym.block.symbols.push(sym)\n                        sym.page.symbols.push(sym)\n                    })\n                    word.paragraph.words.push(word)\n                    word.block.words.push(word)\n                    word.page.words.push(word)\n                })\n                line.block.lines.push(line)\n                line.page.lines.push(line)\n            })\n            para.page.paragraphs.push(para)\n        })\n    })\n    return page\n}","/home/travis/build/npmtest/node-npmtest-tesseract.js/node_modules/tesseract.js/src/common/job.js":"const adapter = require('../node/index.js')\n\nlet jobCounter = 0;\n\nmodule.exports = class TesseractJob {\n    constructor(instance){\n        this.id = 'Job-' + (++jobCounter) + '-' + Math.random().toString(16).slice(3, 8)\n\n        this._instance = instance;\n        this._resolve = []\n        this._reject = []\n        this._progress = []\n        this._finally = []\n    }\n\n    then(resolve, reject){\n        if(this._resolve.push){\n            this._resolve.push(resolve) \n        }else{\n            resolve(this._resolve)\n        }\n\n        if(reject) this.catch(reject);\n        return this;\n    }\n    catch(reject){\n        if(this._reject.push){\n            this._reject.push(reject) \n        }else{\n            reject(this._reject)\n        }\n        return this;\n    }\n    progress(fn){\n        this._progress.push(fn)\n        return this;\n    }\n    finally(fn) {\n        this._finally.push(fn)\n        return this;  \n    }\n    _send(action, payload){\n        adapter.sendPacket(this._instance, {\n            jobId: this.id,\n            action: action,\n            payload: payload\n        })\n    }\n\n    _handle(packet){\n        var data = packet.data;\n        let runFinallyCbs = false;\n\n        if(packet.status === 'resolve'){\n            if(this._resolve.length === 0) console.log(data);\n            this._resolve.forEach(fn => {\n                var ret = fn(data);\n                if(ret && typeof ret.then == 'function'){\n                    console.warn('TesseractJob instances do not chain like ES6 Promises. To convert it into a real promise, use Promise.resolve.')\n                }\n            })\n            this._resolve = data;\n            this._instance._dequeue()\n            runFinallyCbs = true;\n        }else if(packet.status === 'reject'){\n            if(this._reject.length === 0) console.error(data);\n            this._reject.forEach(fn => fn(data))\n            this._reject = data;\n            this._instance._dequeue()\n            runFinallyCbs = true;\n        }else if(packet.status === 'progress'){\n            this._progress.forEach(fn => fn(data))\n        }else{\n            console.warn('Message type unknown', packet.status)\n        }\n\n        if (runFinallyCbs) {\n            this._finally.forEach(fn => fn(data));\n        }\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-tesseract.js/node_modules/tesseract.js/src/browser/index.js":"var defaultOptions = {\n    // workerPath: 'https://cdn.rawgit.com/naptha/tesseract.js/0.2.0/dist/worker.js',\n    corePath: 'https://cdn.rawgit.com/naptha/tesseract.js-core/0.1.0/index.js',    \n    langPath: 'https://cdn.rawgit.com/naptha/tessdata/gh-pages/3.02/',\n}\n\nif (process.env.NODE_ENV === \"development\") {\n    console.debug('Using Development Configuration')\n    defaultOptions.workerPath = location.protocol + '//' + location.host + '/dist/worker.dev.js?nocache=' + Math.random().toString(36).slice(3)\n}else{\n    var version = require('../../package.json').version;\n    defaultOptions.workerPath = 'https://cdn.rawgit.com/naptha/tesseract.js/' + version + '/dist/worker.js'\n}\n\nexports.defaultOptions = defaultOptions;\n\n\nexports.spawnWorker = function spawnWorker(instance, workerOptions){\n    if(window.Blob && window.URL){\n        var blob = new Blob(['importScripts(\"' + workerOptions.workerPath + '\");'])\n        var worker = new Worker(window.URL.createObjectURL(blob));\n    }else{\n        var worker = new Worker(workerOptions.workerPath)\n    }\n\n    worker.onmessage = function(e){\n        var packet = e.data;\n        instance._recv(packet)\n    }\n    return worker\n}\n\nexports.terminateWorker = function(instance){\n    instance.worker.terminate()\n}\n\nexports.sendPacket = function sendPacket(instance, packet){\n    loadImage(packet.payload.image, function(img){\n        packet.payload.image = img\n        instance.worker.postMessage(packet) \n    })\n}\n\n\nfunction loadImage(image, cb){\n    if(typeof image === 'string'){\n        if(/^\\#/.test(image)){\n            // element css selector\n            return loadImage(document.querySelector(image), cb)\n        }else if(/(blob|data)\\:/.test(image)){\n            // data url\n            var im = new Image\n            im.src = image;\n            im.onload = e => loadImage(im, cb);\n            return\n        }else{\n            var xhr = new XMLHttpRequest();\n            xhr.open('GET', image, true)\n            xhr.responseType = \"blob\";\n            xhr.onload = e => loadImage(xhr.response, cb);\n            xhr.onerror = function(e){\n                if(/^https?:\\/\\//.test(image) && !/^https:\\/\\/crossorigin.me/.test(image)){\n                    console.debug('Attempting to load image with CORS proxy')\n                    loadImage('https://crossorigin.me/' + image, cb)\n                }\n            }\n            xhr.send(null)\n            return\n        }\n    }else if(image instanceof File){\n        // files\n        var fr = new FileReader()\n        fr.onload = e => loadImage(fr.result, cb);\n        fr.readAsDataURL(image)\n        return\n    }else if(image instanceof Blob){\n        return loadImage(URL.createObjectURL(image), cb)\n    }else if(image.getContext){\n        // canvas element\n        return loadImage(image.getContext('2d'), cb)\n    }else if(image.tagName == \"IMG\" || image.tagName == \"VIDEO\"){\n        // image element or video element\n        var c = document.createElement('canvas');\n        c.width  = image.naturalWidth  || image.videoWidth;\n        c.height = image.naturalHeight || image.videoHeight;\n        var ctx = c.getContext('2d');\n        ctx.drawImage(image, 0, 0);\n        return loadImage(ctx, cb)\n    }else if(image.getImageData){\n        // canvas context\n        var data = image.getImageData(0, 0, image.canvas.width, image.canvas.height);\n        return loadImage(data, cb)\n    }else{\n        return cb(image)\n    }\n    throw new Error('Missing return in loadImage cascade')\n\n}\n","/home/travis/build/npmtest/node-npmtest-tesseract.js/node_modules/tesseract.js/src/browser/lang.js":"const leveljs = require('level-js')\n\n// something about trying to store these language files in indexedDB\n// causes iOS Safari to crash\n\nvar iOS = /iPad|iPhone|iPod/.test(navigator.userAgent);\nvar noIDB = typeof indexedDB === 'undefined' || iOS;\n\nvar db = noIDB ? { open: (_, cb) =>  cb(true) } : leveljs('./tessdata2')\n\nvar langdata = require('../common/langdata.json')\n\nmodule.exports = function getLanguageData(req, res, cb){\n    var lang = req.options.lang;\n\n    function saveDataFile(data){\n        try {\n            db.put(lang, data, err => console.log('cached', lang, err))\n        } finally {\n            cb(data)    \n        }\n    }\n\n    db.open({ compression: false }, err => {\n        if (err) return fetchLanguageData(req, res, cb);\n        db.get(lang, (err, data) => {\n            if (err) return fetchLanguageData(req, res, saveDataFile);\n            res.progress({ status: 'found in cache ' + lang + '.traineddata' })\n            cb(data)\n        })\n    })\n}\n\n\nconst ungzip = require('pako/lib/inflate.js').ungzip;\n\nfunction fetchLanguageData(req, res, cb){\n    var lang = req.options.lang;\n    var langfile = lang + '.traineddata.gz';\n    var url = req.workerOptions.langPath + langfile;\n\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'arraybuffer';\n    xhr.onerror = e => {\n        xhr.onprogress = xhr.onload = null\n        cb(xhr, null)\n    }\n    xhr.onprogress = e => \n        res.progress({\n            status: 'downloading ' + langfile,\n            loaded: e.loaded,\n            progress: Math.min(1, e.loaded / langdata[lang])\n        });\n\n    xhr.onload = e => {\n        if (!(xhr.status == 200 || (xhr.status == 0 && xhr.response))) return res.reject('Error downloading language ' + url);\n        res.progress({ status: 'unzipping ' + langfile, progress: 0 })\n\n        // in case the gzips are already ungzipped or extra gzipped\n        var response = new Uint8Array(xhr.response)\n        try {\n            var n = 2;\n            while(response[0] == 0x1f && response[1] == 0x8b){\n                response = ungzip(response);\n                res.progress({ status: 'unzipping ' + langfile, progress: 1 - 1 / (n++) })\n            }\n        } catch (err) {\n            return res.reject('Error unzipping language file ' + langfile + '\\n' + err.message)\n        }\n        res.progress({ status: 'unzipping ' + langfile, progress: 1 })\n        \n        cb(response)\n    }\n    xhr.send()\n}\n","/home/travis/build/npmtest/node-npmtest-tesseract.js/node_modules/tesseract.js/src/browser/worker.js":"const workerUtils = require('../common/worker.js')\n\nif (process.env.NODE_ENV === \"development\") {\n    console.debug('Using Development Worker')\n}\n\nglobal.addEventListener('message', function(e){\n    var packet = e.data;\n    workerUtils.dispatchHandlers(packet, obj => postMessage(obj))\n})\n\nexports.getCore = function(req, res){\n    if(!global.TesseractCore){\n        res.progress({ status: 'loading tesseract core', progress: 0 })\n        importScripts(req.workerOptions.corePath)\n        res.progress({ status: 'loading tesseract core', progress: 1 })\n    }\n    return TesseractCore\n}\n\nexports.getLanguageData = require('./lang.js')\n\nworkerUtils.setAdapter(module.exports);\n","/home/travis/build/npmtest/node-npmtest-tesseract.js/node_modules/tesseract.js/src/common/worker.js":"var latestJob;\nvar Module;\nvar base;\nvar adapter = {};\n\nfunction dispatchHandlers(packet, send){\n    function respond(status, data){\n        send({\n            jobId: packet.jobId,\n            status: status,\n            action: packet.action,\n            data: data\n        })\n    }\n    respond.resolve = respond.bind(this, 'resolve')\n    respond.reject = respond.bind(this, 'reject')\n    respond.progress = respond.bind(this, 'progress')\n    \n    latestJob = respond;\n\n    try {\n        if(packet.action === 'recognize'){\n            handleRecognize(packet.payload, respond)\n        }else if(packet.action === 'detect'){\n            handleDetect(packet.payload, respond)\n        }\n    } catch (err) {\n        respond.reject(err)\n    }\n}\nexports.dispatchHandlers = dispatchHandlers;\n\nexports.setAdapter = function setAdapter(impl){\n    adapter = impl;\n}\n\n\nfunction handleInit(req, res){\n    var MIN_MEMORY = 100663296;\n    \n    if(['chi_sim', 'chi_tra', 'jpn'].indexOf(req.options.lang) != -1){\n        MIN_MEMORY = 167772160;\n    }\n\n    if(!Module || Module.TOTAL_MEMORY < MIN_MEMORY){\n        var Core = adapter.getCore(req, res);\n\n        res.progress({ status: 'initializing tesseract', progress: 0 })\n\n        Module = Core({\n            TOTAL_MEMORY: MIN_MEMORY,\n            TesseractProgress(percent){\n                latestJob.progress({ status: 'recognizing text', progress: Math.max(0, (percent-30)/70) })\n            },\n            onRuntimeInitialized() {}\n        })\n\n        Module.FS_createPath(\"/\", \"tessdata\", true, true)\n        base = new Module.TessBaseAPI()\n        res.progress({ status: 'initializing tesseract', progress: 1 })\n    }\n}\n\n\n\nvar dump = require('./dump.js')\nvar desaturate = require('./desaturate.js')\n\n\nfunction setImage(Module, base, image){\n    var imgbin = desaturate(image),\n        width = image.width,\n        height = image.height;\n\n    var ptr = Module.allocate(imgbin, 'i8', Module.ALLOC_NORMAL);\n    base.SetImage(Module.wrapPointer(ptr), width, height, 1, width);\n    base.SetRectangle(0, 0, width, height)\n    return ptr;\n}\n\nfunction loadLanguage(req, res, cb){\n    var lang = req.options.lang;\n    \n    if(!Module._loadedLanguages) Module._loadedLanguages = {};\n    if(lang in Module._loadedLanguages) return cb();\n\n    adapter.getLanguageData(req, res, function(data){\n        res.progress({ status: 'loading ' + lang + '.traineddata', progress: 0 })\n        Module.FS_createDataFile('tessdata', lang + \".traineddata\", data, true, false);\n        Module._loadedLanguages[lang] = true;\n        res.progress({ status: 'loading ' + lang + '.traineddata', progress: 1 })\n        cb()\n    })\n}\n\n\n\nfunction handleRecognize(req, res){\n    handleInit(req, res)\n    \n    loadLanguage(req, res, function(){  \n        var lang = req.options.lang;\n\n        res.progress({ status: 'initializing api', progress: 0 })\n        base.Init(null, lang)\n        res.progress({ status: 'initializing api', progress: 0.3 })        \n\n        var options = req.options;\n        for (var option in options) {\n            if (options.hasOwnProperty(option)) {\n                base.SetVariable(option, options[option]);\n            }\n        }\n\n        res.progress({ status: 'initializing api', progress: 0.6 })\n        var ptr = setImage(Module, base, req.image);\n        res.progress({ status: 'initializing api', progress: 1 })\n\n        base.Recognize(null)\n        \n        var result = dump(Module, base)\n\n        base.End();\n        Module._free(ptr); \n\n        res.resolve(result);\n    })\n}\n\n\nfunction handleDetect(req, res){\n    handleInit(req, res)\n    req.options.lang = 'osd';\n    loadLanguage(req, res, function(){\n\n        base.Init(null, 'osd')\n        base.SetPageSegMode(Module.PSM_OSD_ONLY)\n        \n        var ptr = setImage(Module, base, req.image);\n\n        var results = new Module.OSResults();\n        var success = base.DetectOS(results);\n        if(!success){\n            base.End();\n            Module._free(ptr);\n            res.reject(\"failed to detect os\")\n        } else {\n            var charset = results.get_unicharset()\n            \n            var best = results.get_best_result()\n            var oid = best.get_orientation_id(),\n                sid = best.get_script_id();\n\n            var result = {\n                tesseract_script_id: sid,\n                script: charset.get_script_from_script_id(sid),\n                script_confidence: best.get_sconfidence(),\n                orientation_degrees: [0, 270, 180, 90][oid],\n                orientation_confidence: best.get_oconfidence()\n            }\n\n            base.End();\n            Module._free(ptr);\n\n            res.resolve(result)\n        }\n    })\n}\n","/home/travis/build/npmtest/node-npmtest-tesseract.js/node_modules/tesseract.js/src/common/dump.js":"module.exports = function DumpLiterallyEverything(Module, base){\n    var ri = base.GetIterator();\n    var blocks = [];\n    var block, para, textline, word, symbol;\n\n    function enumToString(value, prefix){\n       return (Object.keys(Module)\n           .filter(function(e){ return e.substr(0, prefix.length + 1) == prefix + '_' })\n           .filter(function(e){ return Module[e] === value })\n           .map(function(e){ return e.slice(prefix.length + 1) })[0])\n    }\n\n    ri.Begin()\n    do {\n        if(ri.IsAtBeginningOf(Module.RIL_BLOCK)){\n            var poly = ri.BlockPolygon();\n            var polygon = null;\n            // BlockPolygon() returns null when automatic page segmentation is off\n            if(Module.getPointer(poly) > 0){\n                var n = poly.get_n(),\n                    px = poly.get_x(),\n                    py = poly.get_y(),\n                    polygon = [];\n                for(var i = 0; i < n; i++){\n                    polygon.push([px.getValue(i), py.getValue(i)]);\n                }\n                Module._ptaDestroy(Module.getPointer(poly));    \n            }\n            \n            block = {\n                paragraphs: [],\n\n                text: ri.GetUTF8Text(Module.RIL_BLOCK),\n                confidence: ri.Confidence(Module.RIL_BLOCK),\n                baseline: ri.getBaseline(Module.RIL_BLOCK),\n                bbox: ri.getBoundingBox(Module.RIL_BLOCK),\n\n                blocktype: enumToString(ri.BlockType(), 'PT'),\n                polygon: polygon\n            }\n            blocks.push(block)\n        }\n        if(ri.IsAtBeginningOf(Module.RIL_PARA)){\n            para = {\n                lines: [],\n\n                text: ri.GetUTF8Text(Module.RIL_PARA),\n                confidence: ri.Confidence(Module.RIL_PARA),\n                baseline: ri.getBaseline(Module.RIL_PARA),\n                bbox: ri.getBoundingBox(Module.RIL_PARA),\n\n                is_ltr: !!ri.ParagraphIsLtr()\n            }\n            block.paragraphs.push(para)\n        }\n        if(ri.IsAtBeginningOf(Module.RIL_TEXTLINE)){\n            textline = {\n                words: [],\n\n                text: ri.GetUTF8Text(Module.RIL_TEXTLINE),\n                confidence: ri.Confidence(Module.RIL_TEXTLINE),\n                baseline: ri.getBaseline(Module.RIL_TEXTLINE),\n                bbox: ri.getBoundingBox(Module.RIL_TEXTLINE)\n            }\n            para.lines.push(textline)\n        }\n        if(ri.IsAtBeginningOf(Module.RIL_WORD)){\n            var fontInfo = ri.getWordFontAttributes(),\n                wordDir = ri.WordDirection();\n            word = {\n                symbols: [],\n                choices: [],\n\n                text: ri.GetUTF8Text(Module.RIL_WORD),\n                confidence: ri.Confidence(Module.RIL_WORD),\n                baseline: ri.getBaseline(Module.RIL_WORD),\n                bbox: ri.getBoundingBox(Module.RIL_WORD),\n\n                is_numeric: !!ri.WordIsNumeric(),\n                in_dictionary: !!ri.WordIsFromDictionary(),\n                direction: enumToString(wordDir, 'DIR'),\n                language: ri.WordRecognitionLanguage(),\n\n                is_bold: fontInfo.is_bold,\n                is_italic: fontInfo.is_italic,\n                is_underlined: fontInfo.is_underlined,\n                is_monospace: fontInfo.is_monospace,\n                is_serif: fontInfo.is_serif,\n                is_smallcaps: fontInfo.is_smallcaps,\n                font_size: fontInfo.pointsize,\n                font_id: fontInfo.font_id,\n                font_name: fontInfo.font_name,\n            }\n            var wc = new Module.WordChoiceIterator(ri);\n            do {\n                word.choices.push({\n                    text: wc.GetUTF8Text(),\n                    confidence: wc.Confidence()\n                })\n            } while (wc.Next());\n            Module.destroy(wc)\n            textline.words.push(word)\n        }\n        \n        var image = null;\n        // var pix = ri.GetBinaryImage(Module.RIL_SYMBOL)\n        // var image = pix2array(pix);\n        // // for some reason it seems that things stop working if you destroy pics\n        // Module._pixDestroy(Module.getPointer(pix));\n        if(ri.IsAtBeginningOf(Module.RIL_SYMBOL)){\n            symbol = {\n                choices: [],\n                image: image,\n\n                text: ri.GetUTF8Text(Module.RIL_SYMBOL),\n                confidence: ri.Confidence(Module.RIL_SYMBOL),\n                baseline: ri.getBaseline(Module.RIL_SYMBOL),\n                bbox: ri.getBoundingBox(Module.RIL_SYMBOL),\n\n                is_superscript: !!ri.SymbolIsSuperscript(),\n                is_subscript: !!ri.SymbolIsSubscript(),\n                is_dropcap: !!ri.SymbolIsDropcap(),\n            }\n            word.symbols.push(symbol)\n            var ci = new Module.ChoiceIterator(ri);\n            do {\n                symbol.choices.push({\n                    text: ci.GetUTF8Text(),\n                    confidence: ci.Confidence()\n                })\n            } while (ci.Next());\n            Module.destroy(ci)\n        }\n    } while (ri.Next(Module.RIL_SYMBOL));\n    Module.destroy(ri)\n\n    return {\n        text: base.GetUTF8Text(),\n        html: deindent(base.GetHOCRText()),\n\n        confidence: base.MeanTextConf(),\n\n        blocks: blocks,\n\n        psm: enumToString(base.GetPageSegMode(), 'PSM'),\n        oem: enumToString(base.oem(), 'OEM'),\n        version: base.Version(),\n    }\n}\n\n// the generated HOCR is excessively indented, so\n// we get rid of that indentation\n\nfunction deindent(html){\n    var lines = html.split('\\n')\n    if(lines[0].substring(0, 2) === \"  \"){\n        for (var i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0,2) === \"  \") {\n                lines[i] = lines[i].slice(2)\n            }\n        };\n    }\n    return lines.join('\\n')\n}\n","/home/travis/build/npmtest/node-npmtest-tesseract.js/node_modules/tesseract.js/src/common/desaturate.js":"// This converts an image to grayscale\n\nmodule.exports = function desaturate(image){\n    var width, height;\n    if(image.data){\n        var src       = image.data;\n            width     = image.width, \n            height    = image.height;\n        var dst       = new Uint8Array(width * height);\n        var srcLength = src.length | 0, srcLength_16 = (srcLength - 16) | 0;\n        \n        for (var i = 0, j = 0; i <= srcLength_16; i += 16, j += 4) {\n            // convert to grayscale 4 pixels at a time; eveything with alpha gets put in front of 50% gray\n            dst[j]     = (((src[i] * 77 + src[i+1] * 151 + src[i+2] * 28) * src[i+3]) + ((255-src[i+3]) << 15) + 32768) >> 16\n            dst[j+1]   = (((src[i+4] * 77 + src[i+5] * 151 + src[i+6] * 28) * src[i+7]) + ((255-src[i+7]) << 15) + 32768) >> 16\n            dst[j+2]   = (((src[i+8] * 77 + src[i+9] * 151 + src[i+10] * 28) * src[i+11]) + ((255-src[i+11]) << 15) + 32768) >> 16\n            dst[j+3]   = (((src[i+12] * 77 + src[i+13] * 151 + src[i+14] * 28) * src[i+15]) + ((255-src[i+15]) << 15) + 32768) >> 16\n        }\n        for (; i < srcLength; i += 4, ++j) //finish up\n            dst[j]     = (((src[i] * 77 + src[i+1] * 151 + src[i+2] * 28) * src[i+3]) + ((255-src[i+3]) << 15) + 32768) >> 16\n        image = dst;\n    } else { throw 'Invalid ImageData' }\n    return image\n}","/home/travis/build/npmtest/node-npmtest-tesseract.js/node_modules/tesseract.js/src/node/lang.js":"const http = require(\"http\"),\n      zlib = require(\"zlib\"),\n      fs   = require(\"fs\"),\n      path = require(\"path\");\n\nvar langdata = require('../common/langdata.json')\n\nfunction getLanguageData(req, res, cb){\n    var lang = req.options.lang;\n    var langfile = lang + '.traineddata.gz';\n    var url = req.workerOptions.langPath + langfile;\n    \n    fs.readFile(lang + '.traineddata', function (err, data) {\n        if(!err) return cb(new Uint8Array(data));\n\n        http.get(url, function(stream){\n            var received_bytes = 0;\n            stream.on('data', function(chunk) {\n                received_bytes += chunk.length;\n                res.progress({ \n                    status: 'downloading ' + langfile, \n                    loaded: received_bytes,\n                    progress: Math.min(1, received_bytes / langdata[lang]) \n                });\n\n            });\n\n            var gunzip = zlib.createGunzip();\n            stream.pipe(gunzip).pipe(fs.createWriteStream(lang + '.traineddata'))\n            gunzip.on('end', function(){ getLanguageData(req, stream, cb) })\n        })\n    });\n}\n\n\nmodule.exports = getLanguageData;"}